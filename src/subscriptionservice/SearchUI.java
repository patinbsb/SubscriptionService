/*
 *
 */
package subscriptionservice;

import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Patrick Goodson
 */
public class SearchUI extends javax.swing.JFrame {

    /**
     * Creates new form SearchUI
     */
    // Tracks current member
    static Member currentMember = null;
    // Search model and list kept in sync, list keeps Item data, model is for
    // display purposes
    static DefaultListModel searchModel = new DefaultListModel();
    static ArrayList<Item> searchList = new ArrayList<>();
    private final MainUI mainForm;
    
    public SearchUI(MainUI mainUI) {
        mainForm = mainUI;
        this.toFront();
        initComponents();
        jListSearch.setModel(searchModel);
    }

    private SearchUI()
    {
        initComponents();
        mainForm = null;
    }
    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabelSearch = new javax.swing.JLabel();
        jScrollPaneSearch = new javax.swing.JScrollPane();
        jListSearch = new javax.swing.JList();
        jTextFieldSearch = new javax.swing.JTextField();
        jButtonClose = new javax.swing.JButton();
        jButtonSub = new javax.swing.JButton();
        jButtonQueue = new javax.swing.JButton();
        jRadioButtonTitle = new javax.swing.JRadioButton();
        jRadioButtonItemNo = new javax.swing.JRadioButton();
        jButtonSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelSearch.setText("Enter Search term:");

        jListSearch.setModel(new javax.swing.AbstractListModel()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListSearch.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPaneSearch.setViewportView(jListSearch);

        jTextFieldSearch.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextFieldSearchKeyReleased(evt);
            }
        });

        jButtonClose.setText("Close");
        jButtonClose.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonCloseActionPerformed(evt);
            }
        });

        jButtonSub.setText("Subscribe");
        jButtonSub.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonSubActionPerformed(evt);
            }
        });

        jButtonQueue.setText("Queue");
        jButtonQueue.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonQueueActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButtonTitle);
        jRadioButtonTitle.setSelected(true);
        jRadioButtonTitle.setText("Search by title");

        buttonGroup1.add(jRadioButtonItemNo);
        jRadioButtonItemNo.setText("Search by item#");

        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelSearch)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldSearch)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonClose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonSub, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonQueue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonItemNo)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jButtonSearch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jRadioButtonTitle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSearch)
                    .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSearch))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRadioButtonTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonItemNo)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSub)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonQueue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                        .addComponent(jButtonClose))
                    .addComponent(jScrollPaneSearch))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // Subscribe clicked
    private void jButtonSubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSubActionPerformed
        int index = jListSearch.getSelectedIndex();
        // Gets user selection
        if (index != -1)
        {
            Item returnItem = searchList.get(index);
            // Checks if item can be subscribed to
            if (returnItem.numberLeft > 1)
            {
                currentMember.subscribeToItem(returnItem.ID);
            }
            else
            {
                JOptionPane.showMessageDialog(null,
                        "This item is oversubscribed, press queue to"
                                + " automatically subscribe when it is available");
            }
        }
    }//GEN-LAST:event_jButtonSubActionPerformed

    // Queue button clicked
    private void jButtonQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonQueueActionPerformed
        int index = jListSearch.getSelectedIndex();
        if (index != -1)
        {
            Item returnItem = searchList.get(index);
            if (!currentMember.subscribedItems.containsKey(returnItem.ID))
            {
                currentMember.queueItem(returnItem.ID);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Cannot queue an item you are already subscribed to");
            }

        }
    }//GEN-LAST:event_jButtonQueueActionPerformed

    // Close button clicked
    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonCloseActionPerformed
    {//GEN-HEADEREND:event_jButtonCloseActionPerformed
        this.setVisible(false);
        mainForm.setEnabled(true);
        mainForm.toFront();
        // Update queue and sub lists on return to main jFrame
        mainForm.updateQueueModel();
        mainForm.updateSubModel();
    }//GEN-LAST:event_jButtonCloseActionPerformed

    // Event for after a key is typed into the search bar, for dynamic searching
    private void jTextFieldSearchKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextFieldSearchKeyReleased
    {//GEN-HEADEREND:event_jTextFieldSearchKeyReleased
        // Clears out the search list
        searchModel.clear();
        searchList.clear();
        ArrayList<Item> itemList = ItemController.getItemList();
        // Search by title
        if (this.jRadioButtonTitle.isSelected())
        {
            //Gets user input
            String searchInput = jTextFieldSearch.getText();
            // So the list doesnt fill to the brim with all items
            if (searchInput.length() != 0)
            {
                // Searches the itemlist for titles that contain text from the search bar
                itemList.stream().filter((item) -> (item.title.toLowerCase().contains(searchInput.toLowerCase()))).map((item) ->
                {
                    searchModel.addElement("Title: " + item.title + " ID: " + item.ID
                            + " numleft: " + item.numberLeft);
                    return item;
                }).forEach((item) ->
                {
                    searchList.add(item);
                }); //Adds found items to the list and model
            }
        }
        // itemNo selected, no dynamic searching by itemNo
        else
        {
            //Checks for alphanumeric characters, clears the searchfield if so
            if (jTextFieldSearch.getText().matches(".*[a-zA-z].*"))
            {
                jTextFieldSearch.setText("");
            }
        }
    }//GEN-LAST:event_jTextFieldSearchKeyReleased

    // Search button clicked
    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSearchActionPerformed
    {//GEN-HEADEREND:event_jButtonSearchActionPerformed
        // As title search is dynamic, button only needed for itemNo searches
        if (this.jRadioButtonItemNo.isSelected())
        {
            // Clear out the list
            searchModel.clear();
            searchList.clear();
            int searchInput = Integer.parseInt(jTextFieldSearch.getText());
            ArrayList<Item> itemList = ItemController.getItemList();
            boolean found = false;
            
            // Searches for item by itemNo
            for (Item item : itemList)
            {
                if (item.ID == searchInput)
                {
                    found = true;
                    searchModel.addElement("Title: " + item.title + " ID: " + item.ID
                                + " numleft: " + item.numberLeft);
                    searchList.add(item);
                        
                }
            }
             
            // Displays message in the List to the user if search failed
            if (!found)
            {
                searchModel.addElement("no such item found");
            }
        }
    }//GEN-LAST:event_jButtonSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() ->
        {
            new SearchUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonQueue;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JButton jButtonSub;
    private javax.swing.JLabel jLabelSearch;
    private javax.swing.JList jListSearch;
    private javax.swing.JRadioButton jRadioButtonItemNo;
    private javax.swing.JRadioButton jRadioButtonTitle;
    private javax.swing.JScrollPane jScrollPaneSearch;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables

    // Pass member info through from mainUI
    void currentMember(Member activeMember)
    {
        currentMember = activeMember;
    }
}
