/*
 *
 */
package subscriptionservice;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Patrick Goodson
 */
public class MainUI extends javax.swing.JFrame
{

    /**
     * Creates new form UI
     *
     * @throws java.io.FileNotFoundException
     * @throws java.text.ParseException
     */
    // Tracks selected member
    static Member currentMember = null;

    //Model for gui list and list for keeping items, indexes are kept in sync
    static DefaultListModel userModel = new DefaultListModel();
    static DefaultListModel subModel = new DefaultListModel();
    static DefaultListModel queueModel = new DefaultListModel();
    //Lists of member subbed and queued items to render to Jlists
    static ArrayList<Object> subTrack = new ArrayList<>();
    static ArrayList<Item> queueTrack = new ArrayList<>();

    static SearchUI searchUI;
    // For loading csv/text files
    JFileChooser listSearch = new JFileChooser();

    /**
     *
     * @throws FileNotFoundException
     * @throws ParseException
     */
    public MainUI() throws FileNotFoundException, ParseException
    {
        initComponents();
        this.toFront();
        String[] args = null;

        // Initialise from csv files
        SubscriptionService.main(args);

        // Set default member and populate lists from member lists
        currentMember = MemberController.getMemberList().get(0);
        // Render current user to jLabel
        jLabelSelectedUser.setText(currentMember.name);

        // Populating jList with members
        MemberController.getMemberList().stream().forEach((member) ->
        {
            userModel.addElement(member.name + ": " + Integer.toString(member.ID));
        });
        jListUsers.setModel(userModel);

        // Populating jList with subscribed items
        currentMember.subscribedItems.entrySet().stream().map((sub) ->
        {
            subModel.addElement(sub);
            return sub;
        }).forEach((sub) ->
        {
            subTrack.add(sub);
        });
        jListSubs.setModel(subModel);

        // Populating jList with queued items
        currentMember.requestedItems.stream().map((request) ->
        {
            queueModel.addElement(request);
            return request;
        }).forEach((request) ->
        {
            queueTrack.add(request);
        });
        jListQueued.setModel(queueModel);

        // GUI setup stuff
        searchUI = new SearchUI(this);
        FileFilter filter = new FileNameExtensionFilter("txt and csv", "txt", "csv");
        listSearch.setFileFilter(filter);
        listSearch.setCurrentDirectory(new File("./src/subscriptionservice/data"));
        
        // Scheduled saving, transaction monitoring ect.
        ScheduledExecutorService schedule = Executors.newSingleThreadScheduledExecutor();
        schedule.scheduleAtFixedRate(new MyTask(), 1, 1, TimeUnit.HOURS);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelSubscriptionManager = new javax.swing.JPanel();
        jLabelSub = new javax.swing.JLabel();
        jScrollPaneSubs = new javax.swing.JScrollPane();
        jListSubs = new javax.swing.JList();
        jButtonSearch = new javax.swing.JButton();
        jButtonRemoveSub = new javax.swing.JButton();
        jButtonSubFromList = new javax.swing.JButton();
        jLabelQueue = new javax.swing.JLabel();
        jScrollPaneQueued = new javax.swing.JScrollPane();
        jListQueued = new javax.swing.JList();
        jButtonRemoveFromQueue = new javax.swing.JButton();
        jPanelConfig = new javax.swing.JPanel();
        jLabelCurrentUser = new javax.swing.JLabel();
        jLabelSelectedUser = new javax.swing.JLabel();
        jButtonChangeUser = new javax.swing.JButton();
        jButtonAddUser = new javax.swing.JButton();
        jButtonRemoveUser = new javax.swing.JButton();
        jButtonLogOut = new javax.swing.JButton();
        jScrollPaneUsers = new javax.swing.JScrollPane();
        jListUsers = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });

        jLabelSub.setText("Subcribed Item(s):");

        jListSubs.setModel(new javax.swing.AbstractListModel()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListSubs.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPaneSubs.setViewportView(jListSubs);

        jButtonSearch.setText("Search for Item...");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonSearchActionPerformed(evt);
            }
        });

        jButtonRemoveSub.setText("Remove Subscription");
        jButtonRemoveSub.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonRemoveSubActionPerformed(evt);
            }
        });

        jButtonSubFromList.setText("Subscribe from list...");
        jButtonSubFromList.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonSubFromListActionPerformed(evt);
            }
        });

        jLabelQueue.setText("Queued Item(s):");

        jListQueued.setModel(new javax.swing.AbstractListModel()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListQueued.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPaneQueued.setViewportView(jListQueued);

        jButtonRemoveFromQueue.setText("Remove from Queue");
        jButtonRemoveFromQueue.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonRemoveFromQueueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelSubscriptionManagerLayout = new javax.swing.GroupLayout(jPanelSubscriptionManager);
        jPanelSubscriptionManager.setLayout(jPanelSubscriptionManagerLayout);
        jPanelSubscriptionManagerLayout.setHorizontalGroup(
            jPanelSubscriptionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSubscriptionManagerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSubscriptionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelSubscriptionManagerLayout.createSequentialGroup()
                        .addComponent(jScrollPaneSubs, javax.swing.GroupLayout.PREFERRED_SIZE, 682, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanelSubscriptionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonRemoveSub, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                            .addComponent(jButtonSubFromList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)))
                    .addGroup(jPanelSubscriptionManagerLayout.createSequentialGroup()
                        .addGroup(jPanelSubscriptionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelSub)
                            .addComponent(jLabelQueue))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanelSubscriptionManagerLayout.createSequentialGroup()
                        .addComponent(jScrollPaneQueued, javax.swing.GroupLayout.PREFERRED_SIZE, 682, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonRemoveFromQueue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelSubscriptionManagerLayout.setVerticalGroup(
            jPanelSubscriptionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelSubscriptionManagerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelSub)
                .addGap(18, 18, 18)
                .addGroup(jPanelSubscriptionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneSubs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelSubscriptionManagerLayout.createSequentialGroup()
                        .addComponent(jButtonSearch)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonRemoveSub)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSubFromList)))
                .addGap(18, 18, 18)
                .addComponent(jLabelQueue)
                .addGap(18, 18, 18)
                .addGroup(jPanelSubscriptionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneQueued, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addGroup(jPanelSubscriptionManagerLayout.createSequentialGroup()
                        .addComponent(jButtonRemoveFromQueue)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Subscription manager", jPanelSubscriptionManager);

        jLabelCurrentUser.setLabelFor(jPanelConfig);
        jLabelCurrentUser.setText("Current user:");

        jLabelSelectedUser.setText("<LOGGED IN USER HERE>");

        jButtonChangeUser.setText("Change user");
        jButtonChangeUser.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonChangeUserActionPerformed(evt);
            }
        });

        jButtonAddUser.setText("Add user");
        jButtonAddUser.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonAddUserActionPerformed(evt);
            }
        });

        jButtonRemoveUser.setText("Remove user");
        jButtonRemoveUser.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonRemoveUserActionPerformed(evt);
            }
        });

        jButtonLogOut.setText("Log Out");
        jButtonLogOut.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonLogOutActionPerformed(evt);
            }
        });

        jListUsers.setModel(new javax.swing.AbstractListModel()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListUsers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPaneUsers.setViewportView(jListUsers);

        javax.swing.GroupLayout jPanelConfigLayout = new javax.swing.GroupLayout(jPanelConfig);
        jPanelConfig.setLayout(jPanelConfigLayout);
        jPanelConfigLayout.setHorizontalGroup(
            jPanelConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConfigLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelConfigLayout.createSequentialGroup()
                        .addComponent(jLabelCurrentUser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelSelectedUser)
                        .addGap(0, 646, Short.MAX_VALUE))
                    .addGroup(jPanelConfigLayout.createSequentialGroup()
                        .addComponent(jScrollPaneUsers)
                        .addGap(18, 18, 18)
                        .addGroup(jPanelConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonRemoveUser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonChangeUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonAddUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonLogOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanelConfigLayout.setVerticalGroup(
            jPanelConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConfigLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCurrentUser)
                    .addComponent(jLabelSelectedUser))
                .addGap(18, 18, 18)
                .addGroup(jPanelConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelConfigLayout.createSequentialGroup()
                        .addComponent(jButtonChangeUser)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAddUser)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonRemoveUser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 190, Short.MAX_VALUE)
                        .addComponent(jButtonLogOut))
                    .addComponent(jScrollPaneUsers))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Configuration", jPanelConfig);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Log out clicked
    private void jButtonLogOutActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonLogOutActionPerformed
    {//GEN-HEADEREND:event_jButtonLogOutActionPerformed
        // Go back to the authentication window
        this.setVisible(false);
        AuthenticationUI authenticationUI = new AuthenticationUI();
        authenticationUI.setVisible(true);
        
        // Saves memory to CSV files
        try
        {
            MainUI.saveAll();
        } catch (IOException ex)
        {
            Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();
    }//GEN-LAST:event_jButtonLogOutActionPerformed

    // Remove user clicked
    private void jButtonRemoveUserActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonRemoveUserActionPerformed
    {//GEN-HEADEREND:event_jButtonRemoveUserActionPerformed
        // Checks if a user is selected and there is at least 2 users
        if (jListUsers.getSelectedIndex() != -1 && MemberController.memberList.size() != 1)
        {
            int removeID = MemberController.memberList.get(jListUsers.getSelectedIndex()).ID;
            MemberController.removeMember(removeID);
            // If the current user is removed, change it a different user
            if (currentMember.ID == removeID)
            {
                currentMember = MemberController.memberList.get(0);
                jLabelSelectedUser.setText(currentMember.name);
            }
            // Update the GUI
            userModel.remove(jListUsers.getSelectedIndex());
        }
    }//GEN-LAST:event_jButtonRemoveUserActionPerformed

    // Add user clicked
    private void jButtonAddUserActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonAddUserActionPerformed
    {//GEN-HEADEREND:event_jButtonAddUserActionPerformed
        // Prompts for username
        String name = JOptionPane.showInputDialog("Enter user name: ");
        //Create member with a unique ID
        MemberController.createMember(-1, name);
        // Update GUI
        updateUsermodel();
    }//GEN-LAST:event_jButtonAddUserActionPerformed

    // Change user clicked
    private void jButtonChangeUserActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonChangeUserActionPerformed
    {//GEN-HEADEREND:event_jButtonChangeUserActionPerformed
        if (jListUsers.getSelectedIndex() != -1)
        {
            currentMember = MemberController.memberList.get(jListUsers.getSelectedIndex());
            jLabelSelectedUser.setText(currentMember.name);
            updateSubModel();
            updateQueueModel();
        }
    }//GEN-LAST:event_jButtonChangeUserActionPerformed

    // Remove Item from queue clicked
    private void jButtonRemoveFromQueueActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonRemoveFromQueueActionPerformed
    {//GEN-HEADEREND:event_jButtonRemoveFromQueueActionPerformed
        if (jListQueued.getSelectedIndex() != -1)
        {
            // Get item
            Item currentQueue = queueTrack.get(jListQueued.getSelectedIndex());
            int key = currentQueue.ID;
            // Remove item from current users queue
            currentMember.unQueueItem(key);
            queueTrack.remove(jListQueued.getSelectedIndex());
            updateQueueModel();

        }
    }//GEN-LAST:event_jButtonRemoveFromQueueActionPerformed

    // Remove subscription clicked
    private void jButtonRemoveSubActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonRemoveSubActionPerformed
    {//GEN-HEADEREND:event_jButtonRemoveSubActionPerformed
        if (jListSubs.getSelectedIndex() != -1)
        {
            Object currentSub = subTrack.get(jListSubs.getSelectedIndex());
            String out = currentSub.toString();
            int key = Integer.parseInt(out.substring(0, out.indexOf("=")));
            currentMember.returnItem(key);
            subTrack.remove(jListSubs.getSelectedIndex());
            updateSubModel();

        }
    }//GEN-LAST:event_jButtonRemoveSubActionPerformed

    // Search for items clicked
    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSearchActionPerformed
    {//GEN-HEADEREND:event_jButtonSearchActionPerformed
        // Freeze mainUI and show searchUI
        this.setEnabled(false);
        searchUI.setAlwaysOnTop(true);
        searchUI.setVisible(true);
        searchUI.currentMember(MainUI.currentMember);

    }//GEN-LAST:event_jButtonSearchActionPerformed

    // Subscribe from list (csv + text) clicked
    private void jButtonSubFromListActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSubFromListActionPerformed
    {//GEN-HEADEREND:event_jButtonSubFromListActionPerformed
        // File explorer
        listSearch.showOpenDialog(this);
        File selFile = listSearch.getSelectedFile();

        // Scan through items and subscribe to them if possible
        // otherwise queue items, if both sub and queue > 5 show message and stop.
        try (Scanner scannertransactions = new Scanner(selFile))
        {
            scannertransactions.useDelimiter(",|\r\n");
            scannertransactions.nextLine();
            while (scannertransactions.hasNext())
            {
                if (currentMember.canSubscribe())
                {
                    currentMember.subscribeToItem(Integer.parseInt(scannertransactions.next()));
                }
                else if (currentMember.canQueue())
                {
                    currentMember.queueItem(Integer.parseInt(scannertransactions.next()));
                }
                else
                {
                    JOptionPane.showMessageDialog(rootPane, "Cannot queue or"
                            + " subscribe to anymore items (over 5 items each)");
                    break;
                }
                scannertransactions.next();
                scannertransactions.next();
            }
            updateSubModel();
            updateQueueModel();
        } catch (FileNotFoundException ex)
        {
            Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButtonSubFromListActionPerformed
    
    // Window is closed
    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        try
        {
            MainUI.saveAll();
        } catch (IOException ex)
        {
            Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() ->
        {
            try
            {
                new MainUI().setVisible(true);
            } catch (FileNotFoundException | ParseException ex)
            {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    /**
     * Refreshes user GUI
     */
    private void updateUsermodel()
    {
        Member newMember = MemberController.getMemberList().get(MemberController.getMemberList().size() - 1);
        userModel.addElement(newMember.name + ": " + Integer.toString(newMember.ID));
    }

    /**
     * Refreshes subscription GUI
     */
    void updateSubModel()
    {
        subModel.clear();
        subTrack.clear();
        for (Object sub : currentMember.subscribedItems.entrySet())
        {
            subModel.addElement(sub);
            subTrack.add(sub);
        }
        jListSubs.setModel(subModel);
    }

    /**
     * Refreshes Queue gui
     */
    void updateQueueModel()
    {
        queueModel.clear();
        queueTrack.clear();
        for (Item request : currentMember.requestedItems)
        {
            queueModel.addElement(request);
            queueTrack.add(request);
        }
        jListQueued.setModel(queueModel);
    }

    /**
     * Saves items, members and transactions to their representative CSV files
     *
     * @throws IOException
     */
    static void saveAll() throws IOException
    {
        String membersPath = "src/subscriptionservice/Data/members.csv";
        String itemsPath = "src/subscriptionservice/Data/items.csv";
        String transactionsPath = "src/subscriptionservice/Data/transactions.csv";

        LinkedList<Member> members = MemberController.getMemberList();
        ArrayList<Item> items = ItemController.getItemList();
        Queue<Transaction> transactions = TransactionController.getTransactionQueue();
        ArrayList<Transaction> transactionToList = new ArrayList<>();
        
        // Transaction queue must be saved in reverse order to preserve timings
        while (transactions.peek() != null)
        {
            transactionToList.add(transactions.remove());
        }
        Collections.reverse(transactionToList);
        
        // Clear out CSV
        PrintWriter clearMembers = new PrintWriter(membersPath);
        clearMembers.close();
        BufferedWriter brMembers = new BufferedWriter(new FileWriter(membersPath));
        StringBuilder sbMembers = new StringBuilder();

        // Appending to the buffered writer the csv data in correct format for reading
        sbMembers.append("Member_ID,Member Name\r\n");
        for (Member member : members)
        {
            sbMembers.append(member.ID);
            sbMembers.append(",");
            sbMembers.append(member.name);
            sbMembers.append("\r\n");
        }
        
        brMembers.write(sbMembers.toString());
        brMembers.close();
        
        PrintWriter clearItems = new PrintWriter(itemsPath);
        clearItems.close();
        BufferedWriter brItems = new BufferedWriter(new FileWriter(itemsPath));
        StringBuilder sbItems = new StringBuilder();

        sbItems.append("item_No,Title,Number available\r\n");
        for (Item item : items)
        {
            sbItems.append(item.ID);
            sbItems.append(",");
            sbItems.append(item.title);
            sbItems.append(",");
            sbItems.append(item.numberLeft);
            sbItems.append("\r\n");
        }
        
        brItems.write(sbItems.toString());
        brItems.close();
        
        PrintWriter clearTransactions = new PrintWriter(transactionsPath);
        clearTransactions.close();
        BufferedWriter brTransactions = new BufferedWriter(new FileWriter(transactionsPath));
        StringBuilder sbTransactions = new StringBuilder();

        sbTransactions.append("Transaction_ID,Item_ID,Member_ID,Date\r\n");
        if (transactionToList.size() > 0)
        {
            for (Transaction trans : transactionToList)
            {
                sbTransactions.append(trans.transactionID);
                sbTransactions.append(",");
                sbTransactions.append(trans.itemID);
                sbTransactions.append(",");
                sbTransactions.append(trans.memberID);
                sbTransactions.append(",");
                sbTransactions.append(trans.date);
                sbTransactions.append("\r\n");
            }
        }

        
        brTransactions.write(sbTransactions.toString());
        brTransactions.close();

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddUser;
    private javax.swing.JButton jButtonChangeUser;
    private javax.swing.JButton jButtonLogOut;
    private javax.swing.JButton jButtonRemoveFromQueue;
    private javax.swing.JButton jButtonRemoveSub;
    private javax.swing.JButton jButtonRemoveUser;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JButton jButtonSubFromList;
    private javax.swing.JLabel jLabelCurrentUser;
    private javax.swing.JLabel jLabelQueue;
    private javax.swing.JLabel jLabelSelectedUser;
    private javax.swing.JLabel jLabelSub;
    private javax.swing.JList jListQueued;
    private javax.swing.JList jListSubs;
    private javax.swing.JList jListUsers;
    private javax.swing.JPanel jPanelConfig;
    private javax.swing.JPanel jPanelSubscriptionManager;
    private javax.swing.JScrollPane jScrollPaneQueued;
    private javax.swing.JScrollPane jScrollPaneSubs;
    private javax.swing.JScrollPane jScrollPaneUsers;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    
        // Set up a scheduled task to return overdue items and save data on the hour
    // Also checks if members Queued items can be subscribed to
    

    class MyTask implements Runnable
    {

        public MyTask()
        {
            run();
        }

        @Override
        public void run()
        {
            try
            {
                MainUI.saveAll();
            } catch (IOException ex)
            {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            try
            {
                TransactionController.returnOverdue();
            } catch (ParseException ex)
            {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            LinkedList<Member> members = MemberController.getMemberList();
            for (Member member : members)
            {
                for (Item item : member.requestedItems)
                {
                    if (item.numberLeft > 1)
                    {
                        member.subscribeToItem(item.ID);
                        member.requestedItems.remove(item);
                    }
                }
            }
            updateSubModel();
            updateQueueModel();
        }
    }
}


